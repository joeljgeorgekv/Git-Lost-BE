name: Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: trip-planner-be
  CONTAINER_NAME: trip-planner
  APP_PORT: 8000
  HOST_PORT: 80

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials (OIDC if available, else static)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --image-scanning-configuration scanOnPush=true --region "${AWS_REGION}"

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS Credentials (OIDC if available, else static)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR (for registry value)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute IMAGE_URI
        id: image
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Get ECR password
        run: |
          echo "ECR_PASSWORD=$(aws ecr get-login-password --region \"${{ env.AWS_REGION }}\")" >> $GITHUB_ENV

      - name: Deploy over SSH to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 13.233.11.91
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE_URI,AWS_REGION,ECR_REPOSITORY,CONTAINER_NAME,APP_PORT,HOST_PORT,ECR_PASSWORD
          script: |
            set -euo pipefail
            echo "Deploying ${IMAGE_URI} to ${HOSTNAME}"
            # Ensure dependencies (Docker & AWS CLI)
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo apt-get update -y && sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y && sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin unzip
            fi
            # Login to ECR on EC2 using password computed in CI
            if [ -z "${ECR_PASSWORD:-}" ]; then
              echo "ECR_PASSWORD is empty or not set; cannot login to ECR" >&2
              exit 1
            fi
            printf "%s" "${ECR_PASSWORD}" | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Pull latest image
            sudo docker pull "${IMAGE_URI}"

            # Stop and remove any existing container
            sudo docker rm -f "${CONTAINER_NAME}" >/dev/null 2>&1 || true

            # Ensure env dir exists; expects /opt/trip-planner/.env to be present on the instance
            sudo mkdir -p /opt/trip-planner
            if [ ! -f /opt/trip-planner/.env ]; then
              echo "/opt/trip-planner/.env not found. Create it with required environment variables before deploying." >&2
              exit 1
            fi

            # Run the new container
            sudo docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              -p ${HOST_PORT}:${APP_PORT} \
              --env-file /opt/trip-planner/.env \
              "${IMAGE_URI}"

            echo "Deployment completed."


