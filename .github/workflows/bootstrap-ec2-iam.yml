name: Bootstrap EC2 IAM Role for ECR Pull

on:
  workflow_dispatch:
    inputs:
      instance_id:
        description: "EC2 Instance ID (preferred)"
        required: false
        type: string
      public_ip:
        description: "EC2 Public IPv4 (if instance_id not provided)"
        required: false
        type: string
      role_name:
        description: "IAM Role name to create/attach"
        required: false
        default: "ec2-ecr-pull-role"
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

jobs:
  bootstrap:
    name: Create/Attach EC2 Role for ECR ReadOnly
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve Instance ID if only public IP provided
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          INSTANCE_ID_INPUT='${{ inputs.instance_id }}'
          PUBLIC_IP_INPUT='${{ inputs.public_ip }}'
          if [ -n "$INSTANCE_ID_INPUT" ]; then
            echo "INSTANCE_ID=$INSTANCE_ID_INPUT" >> $GITHUB_ENV
            exit 0
          fi
          if [ -z "$PUBLIC_IP_INPUT" ]; then
            echo "Either instance_id or public_ip is required" >&2
            exit 1
          fi
          IID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=$PUBLIC_IP_INPUT" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          if [ -z "$IID" ] || [ "$IID" = "None" ]; then
            echo "Could not resolve instance by public IP: $PUBLIC_IP_INPUT" >&2
            exit 1
          fi
          echo "Resolved InstanceId: $IID"
          echo "INSTANCE_ID=$IID" >> $GITHUB_ENV

      - name: Create IAM Role trust policy (EC2)
        id: trust
        run: |
          cat > trust-policy.json <<'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": "ec2.amazonaws.com" },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF

      - name: Ensure IAM Role exists
        run: |
          set -euo pipefail
          ROLE_NAME='${{ inputs.role_name }}'
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            echo "Role $ROLE_NAME exists"
          else
            aws iam create-role \
              --role-name "$ROLE_NAME" \
              --assume-role-policy-document file://trust-policy.json \
              --description "EC2 role to pull images from ECR"
          fi

      - name: Ensure Instance Profile exists and contains role
        run: |
          set -euo pipefail
          ROLE_NAME='${{ inputs.role_name }}'
          PROFILE_NAME="$ROLE_NAME"
          if aws iam get-instance-profile --instance-profile-name "$PROFILE_NAME" >/dev/null 2>&1; then
            echo "Instance profile $PROFILE_NAME exists"
          else
            aws iam create-instance-profile --instance-profile-name "$PROFILE_NAME"
          fi
          # Add role to instance profile if missing
          if aws iam get-instance-profile --instance-profile-name "$PROFILE_NAME" \
             --query 'InstanceProfile.Roles[?RoleName==`'"$ROLE_NAME"'`]' --output text | grep -q "$ROLE_NAME"; then
            echo "Role already present in instance profile"
          else
            aws iam add-role-to-instance-profile --instance-profile-name "$PROFILE_NAME" --role-name "$ROLE_NAME" || true
          fi

      - name: Attach AmazonEC2ContainerRegistryReadOnly to role
        run: |
          set -euo pipefail
          ROLE_NAME='${{ inputs.role_name }}'
          POLICY_ARN='arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
          if aws iam list-attached-role-policies --role-name "$ROLE_NAME" \
             --query 'AttachedPolicies[?PolicyArn==`'"$POLICY_ARN"'`]' --output text | grep -q "$POLICY_ARN"; then
            echo "Policy already attached"
          else
            aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn "$POLICY_ARN"
          fi

      - name: Associate Instance Profile to EC2 Instance
        run: |
          set -euo pipefail
          ROLE_NAME='${{ inputs.role_name }}'
          PROFILE_NAME="$ROLE_NAME"
          IID="$INSTANCE_ID"
          # Try associate; if an association already exists, attempt replace
          if aws ec2 associate-iam-instance-profile \
              --instance-id "$IID" \
              --iam-instance-profile Name="$PROFILE_NAME" >/tmp/assoc.json 2>/tmp/assoc.err; then
            echo "Associated profile $PROFILE_NAME to $IID"
            exit 0
          fi
          if grep -q "has an associated instance profile" /tmp/assoc.err; then
            ASSOC_ID=$(aws ec2 describe-iam-instance-profile-associations \
              --filters Name=instance-id,Values="$IID" \
              --query 'IamInstanceProfileAssociations[0].AssociationId' \
              --output text)
            if [ -n "$ASSOC_ID" ] && [ "$ASSOC_ID" != "None" ]; then
              aws ec2 replace-iam-instance-profile-association \
                --association-id "$ASSOC_ID" \
                --iam-instance-profile Name="$PROFILE_NAME"
              echo "Replaced existing association $ASSOC_ID with $PROFILE_NAME"
            else
              echo "Could not find existing association to replace" >&2
              exit 1
            fi
          else
            echo "Failed to associate instance profile" >&2
            cat /tmp/assoc.err >&2 || true
            exit 1
          fi


